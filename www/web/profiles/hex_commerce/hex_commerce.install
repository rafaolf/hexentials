<?php
/**
 * @file
 * Install, update and uninstall functions for the hex_commerce install profile.
 */

use Drupal\Core\Form\FormState;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function hex_commerce_install() {
  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();
}

/**
 * Implements hook_install_tasks().
 */
function hex_commerce_install_tasks(&$install_state) {
  $tasks = [
    'hex_commerce_define_theme' => [
      'display_name' => t('Enable the default theme'),
      'type' => 'normal',
    ],
    'hex_commerce_prepare_theme_structure' => [
      'display_name' => t('Prepare the theme structure'),
      'type' => 'normal',
    ],
    'hex_commerce_prepare_menu_structure' => [
      'display_name' => t('Prepare the menu structure'),
      'type' => 'normal',
    ],
    'hex_commerce_client_settings_form' => [
      'display_name' => t('Define the client settings'),
      'type' => 'form',
      'function' => 'Drupal\hex_commerce\Form\ClientSettingsForm',
    ],
    'hex_commerce_store_settings_form' => [
      'display_name' => t('Create the default store'),
      'type' => 'form',
      'function' => 'Drupal\hex_commerce\Form\StoreSettingsForm',
    ],
    'hex_commerce_prepare_store' => [
      'display_name' => t('Prepare the first store'),
      'type' => 'normal',
    ],
    'hex_commerce_import_default_content' => [
      'display_name' => t('Install default content'),
      'type' => 'normal',
    ],
    'hex_commerce_update_theme_settings' => [
      'display_name' => t('Update theme settings to generate the structure'),
      'type' => 'normal',
    ],
    'hex_commerce_prepare_block_content' => [
      'display_name' => t('Prepare the banner block type'),
      'type' => 'normal',
    ],
    'hex_commerce_optimization' => [
      'display_name' => t('Configure the optimization-related options'),
      'type' => 'normal',
    ],
  ];

  return $tasks;
}

/**
 * Callback function to enable the default theme.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_define_theme() {
  \Drupal::configFactory()->getEditable('system.theme')->set('default', 'hex')->save();
}

/** Callback function to prepare the theme structure.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_prepare_theme_structure() {
  \Drupal::configFactory()->getEditable('flexi_cart_search')->delete();
  \Drupal::service('module_installer')->uninstall(['search']);
}

/** Callback function to prepare the theme structure.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_prepare_menu_structure() {
  \Drupal::service('router.builder')->rebuildIfNeeded();
}

/** Callback function to prepare the store.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_prepare_store() {
  module_load_include('inc', 'hex_commerce', 'hex_commerce.products');

  hex_commerce_prepare_products();
}

/**
 * Callback function to install default profile content.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_import_default_content() {
  \Drupal::service('default_content.importer')->importContent('hex_commerce_default_content');
}

/**
 * Update the theme settings with flexi_cart colors.
 */
function hex_commerce_update_theme_settings() {
  global $base_url;
  $theme = \Drupal::theme()->getActiveTheme();
  $css_path = $base_url.'/'. $theme->getPath() .'/css/hc.color.css';
  $info = color_get_info('hex');

  $values = [
    'theme' => 'hex',
    'info' => $info,
    'palette' => [
      'primary' => '#111111',
      'active' => '#f51167',
      'shadow' => '#dadce0',
      'hover' => '#f51167',
      'hover_background' => '#ffffff',
      'background' => '#ffffff',
      'view' => '#ffffff',
      'top_menu_item' => '#111111',
      'header_second' => '#ffffff',
      'footer_menu_item' => '#ffffff',
      'text' => '#000000',
    ],
    'scheme' => 'flexi_cart',
    'schemes' => NULL,
  ];

  $form_state = new FormState();
  $form_state->setValues($values);

  color_scheme_form_submit(array(), $form_state);
}

/**
 * Prepare the banner block type.
 */
function hex_commerce_prepare_block_content() {
  $profile_path = \Drupal::service('file_system')->realpath(drupal_get_path('profile', 'hex_commerce'));
  $info = [
    '839373e3-89b2-4534-ad34-587a5fbf28c5' => [
      0 => [
        'filename' => 'bottom-banner-reduced.jpg',
        'field_name' => 'field_block_banner_image',
      ],
    ],
    '7f724463-3ad6-4c14-8b1c-cea7a289da33' => [
      0 => [
        'filename' => 'change.jpeg',
        'field_name' => 'field_block_double_image_first',
      ],
      1 => [
        'filename' => 'road.jpg',
        'field_name' => 'field_block_double_image_second',
      ],
    ],
  ];

  foreach ($info as $block_uuid => $file_info) {
    foreach ($file_info as $data) {
      $image_path = $profile_path . '/images/blocks/' . $data['filename'];

      $content = file_get_contents($image_path);
      $file = file_save_data($content, 'public://' . $data['filename'], FILE_EXISTS_REPLACE);

      $block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $block_uuid);

      if (!$block->hasField($data['field_name'])) {
        continue;
      }

      $block->set($data['field_name'], $file->id());
      $block->save();
    }
  }
}

/**
 * Configure optimization-related options.
 */
function hex_commerce_optimization() {
  // Force the minifier to use the C compile version of JSMin as the config
  // isn't working properly.
  \Drupal::configFactory()->getEditable('advagg_js_minify.settings')->set('minifier', 3)->save();
}
