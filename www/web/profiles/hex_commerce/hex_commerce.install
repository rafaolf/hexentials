<?php
/**
 * @file
 * Install, update and uninstall functions for the hex_commerce install profile.
 */

use Drupal\Core\Form\FormState;
use Drupal\commerce_price\Price;
use Drupal\commerce_product\Entity\Product;
use Drupal\commerce_product\Entity\ProductAttribute;
use Drupal\commerce_product\Entity\ProductAttributeValue;
use Drupal\commerce_product\Entity\ProductType;
use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\commerce_product\Entity\ProductVariationType;
use Drupal\commerce_store\Entity\Store;
use Drupal\commerce_store\Form\StoreForm;
use Drupal\hex_commerce\Form;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function hex_commerce_install() {
  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();
}

/**
 * Implements hook_install_tasks().
 */
function hex_commerce_install_tasks(&$install_state) {
  $tasks = [
    'hex_commerce_define_theme' => [
      'display_name' => t('Enable the default theme'),
      'type' => 'normal',
    ],
    'hex_commerce_prepare_theme_structure' => [
      'display_name' => t('Prepare the theme structure'),
      'type' => 'normal',
    ],
    'hex_commerce_prepare_menu_structure' => [
      'display_name' => t('Prepare the menu structure'),
      'type' => 'normal',
    ],
    'hex_commerce_client_settings_form' => [
      'display_name' => t('Define the client settings'),
      'type' => 'form',
      'function' => 'Drupal\hex_commerce\Form\ClientSettingsForm',
    ],
    'hex_commerce_store_settings_form' => [
      'display_name' => t('Create the default store'),
      'type' => 'form',
      'function' => 'Drupal\hex_commerce\Form\StoreSettingsForm',
    ],
    'hex_commerce_prepare_store' => [
      'display_name' => t('Prepare the first store'),
      'type' => 'normal',
    ],
    'hex_commerce_import_default_content' => [
      'display_name' => t('Install default content'),
      'type' => 'normal',
    ],
    'hex_commerce_update_theme_settings' => [
      'display_name' => t('Update theme settings to generate the structure'),
      'type' => 'normal',
    ]
  ];

  return $tasks;
}

/**
 * Callback function to enable the default theme.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_define_theme() {
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'hex')
    ->save();
}

/** Callback function to prepare the theme structure.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_prepare_theme_structure() {
  // \Drupal::service('module_installer')->install(['estore_homepage_feature'], TRUE);
}

/** Callback function to prepare the theme structure.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_prepare_menu_structure() {
  // @TODO: add the menu here or as part of default content.
  \Drupal::service('router.builder')->rebuildIfNeeded();
}

/** Callback function to prepare the store.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_prepare_store() {
  hex_commerce_create_product_variation_and_attributes();
}

/**
 * Callback function to install default profile content.
 *
 * @see hex_commerce_install_tasks()
 */
function hex_commerce_import_default_content() {
  \Drupal::service('default_content.importer')->importContent('hex_commerce_default_content');
}

/**
 * Create the product variation and attributes.
 */
function hex_commerce_create_product_variation_and_attributes() {
  // Create the new variation type.
  $variation_type = ProductVariationType::create([
    'status' => 1,
    'id' => 'variation_type_with_color',
    'label' => 'Variation Type With Color',
    'orderItemType' => 'default',
    'generateTitle' => TRUE,
  ]);
  $variation_type->save();

  $color_attribute = ProductAttribute::create([
    'id' => 'color',
    'label' => 'color',
  ]);
  $color_attribute->save();

  $field_manager = \Drupal::service('commerce_product.attribute_field_manager');
  $field_manager->createField($color_attribute, $variation_type->id());

  $blue = ProductAttributeValue::create([
    'attribute' => 'color',
    'name' => 'blue',
  ]);
  $blue->save();

  $red = ProductAttributeValue::create([
    'attribute' => 'color',
    'name' => 'red',
  ]);
  $red->save();

  $price = new Price('24.99', 'BRL');

  $variation = ProductVariation::create([
    'type' => 'variation_type_with_color',
    'sku' => 'test-product-01',
    'status' => 1,
    'price' => $price,
    'attribute_color' => $red,
  ]);
  $variation->save();

  hex_commerce_create_product_types($variation);
}

/**
 * Create the product types.
 */
function hex_commerce_create_product_types(ProductVariation $variation) {
  $product_type = ProductType::create([
    'id' => 'with_color_variations',
    'label' => 'Product Type with Color Variations',
    'status' => 1,
    'description' => 'This is the description of the product',
    'variationType' => 'variation_type_with_color',
    'injectVariationFields' => TRUE,
  ]);
  $product_type->save();

  // These three functions must be called to add the appropriate fields to the type.
  commerce_product_add_variations_field($product_type);
  commerce_product_add_stores_field($product_type);
  commerce_product_add_body_field($product_type);

  $store = Store::load(1);

  $product = Product::create([
    'uid' => 1,
    'type' => 'with_color_variations',
    'title' => 'My product',
    'stores' => [$store],
    'variations' => [$variation],
  ]);
  $product->save();
}

/**
 * Create the product types.
 */
function hex_commerce_update_theme_settings() {
  global $base_url;
  $theme = \Drupal::theme()->getActiveTheme();
  $css_path = $base_url.'/'. $theme->getPath() .'/css/hc.color.css';
  $info = color_get_info('hex');

  $values = [
    'theme' => 'hex',
    'info' => $info,
    'palette' => [
      'primary' => '#111111',
      'secondary' => '#222222',
      'active' => '#f51167',
      'background' => '#ffffff',
      'top_menu_item' => '#111111',
      'footer_menu_item' => '#ffffff',
      'text' => '#000000',
    ],
    'scheme' => 'flexi_cart',
    'schemes' => NULL,
  ];

  $form_state = new FormState();
  $form_state->setValues($values);

  color_scheme_form_submit(array(), $form_state);
}
