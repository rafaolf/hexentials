<?php
/**
 * @file
 * Install, update and uninstall functions for the Hexentials install profile.
 */

define('HEXENTIALS_DEFAULT_TRANSLATION_FILENAME', 'drupal-8.9.7.pt-br.po');

use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormState;

/**
 * Implements hook_install_tasks_alter().
 */
function hexentials_install_tasks_alter(&$tasks, $install_state) {
  $tasks['install_download_translation']['function'] = 'hexentials_install_download_translation';
}

/**
 * Prepare the default translation file.
 *
 * @see install_check_translations().
 */
function hexentials_install_download_translation(&$install_state) {
  $site_path = \Drupal::service('site.path');
  $files_directory = $site_path . '/files';
  $translations_directory = $site_path . '/files/translations';

  // First attempt to create or make writable the files directory.
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  $file_system->prepareDirectory($files_directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  // Then, attempt to create or make writable the translations directory.
  $file_system->prepareDirectory($translations_directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  if ($existing_file = glob($translations_directory . '/' . HEXENTIALS_DEFAULT_TRANSLATION_FILENAME)) {
    return;
  }

  $profile_path = \Drupal::service('file_system')->realpath(drupal_get_path('profile', 'hexentials'));
  $translation_file_path = \Drupal::service('file_system')->realpath('public://translations');

  copy($profile_path . '/translations/' . HEXENTIALS_DEFAULT_TRANSLATION_FILENAME, $translation_file_path . '/' . HEXENTIALS_DEFAULT_TRANSLATION_FILENAME);

  install_goto(install_redirect_url($install_state));
}

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function hexentials_install() {
  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();
}

/**
 * Implements hook_install_tasks().
 */
function hexentials_install_tasks(&$install_state) {
  $tasks = [
    'hexentials_select_profile_type' => [
      'display_name' => t('Select the profile type'),
      'type' => 'form',
      'function' => 'Drupal\hexentials\Form\ProfileTypeForm',
    ],
    'hexentials_define_theme' => [
      'display_name' => t('Enable the default theme'),
      'type' => 'normal',
    ],
    'hexentials_prepare_theme_structure' => [
      'display_name' => t('Prepare the theme structure'),
      'type' => 'normal',
    ],
    'hexentials_prepare_menu_structure' => [
      'display_name' => t('Prepare the menu structure'),
      'type' => 'normal',
    ],
    'hexentials_client_settings_form' => [
      'display_name' => t('Define the client settings'),
      'type' => 'form',
      'function' => 'Drupal\hexentials\Form\ClientSettingsForm',
    ],
    'hexentials_import_default_content' => [
      'display_name' => t('Install default content'),
      'type' => 'normal',
    ],
    'hexentials_update_theme_settings' => [
      'display_name' => t('Update theme settings to generate the structure'),
      'type' => 'normal',
    ],
    'hexentials_prepare_block_content' => [
      'display_name' => t('Prepare the banner block type'),
      'type' => 'normal',
    ],
    'hexentials_optimization' => [
      'display_name' => t('Configure the optimization-related options'),
      'type' => 'normal',
    ],
    // We need to create the store for both profile types as at this point the
    // list of install tasks can't be changed.
    'hexentials_store_settings_form' => [
      'display_name' => t('Create the main store'),
      'type' => 'form',
      'function' => 'Drupal\hexentials\Form\StoreSettingsForm',
    ],
    'hexentials_prepare_install_tasks' => [
      'display_name' => t('Prepare the install tasks based on the profile type'),
      'type' => 'normal',
    ],
  ];

  return $tasks;
}

/**
 * Prepare the install tasks based on the profile type.
 *
 * @see hexentials_install_tasks()
 */
function hexentials_prepare_install_tasks(&$tasks) {
  $profile_type = \Drupal::state()->get('profile_type');
  $function_name = sprintf('hexentials_prepare_%s_profile_type', $profile_type);

  $function_name();
}

/**
 * Prepare the brochure profile type.
 */
function hexentials_prepare_brochure_profile_type() {
  \Drupal::configFactory()->getEditable('cartflyout')->delete();
  \Drupal::configFactory()->getEditable('commerce_order_item.add_to_cart')->delete();
  \Drupal::configFactory()->getEditable('commerce_product.body')->delete();
  \Drupal::configFactory()->getEditable('commerce_product.default.default')->delete();
  \Drupal::configFactory()->getEditable('commerce_product.default.products')->delete();
  \Drupal::configFactory()->getEditable('commerce_product.default.teaser')->delete();
  \Drupal::configFactory()->getEditable('commerce_product.default.field_product_image ')->delete();
  \Drupal::configFactory()->getEditable('commerce_product.field_image')->delete();
  \Drupal::configFactory()->getEditable('commerce_product.field_product_image')->delete();
  \Drupal::configFactory()->getEditable('commerce_product.teaser')->delete();
  \Drupal::configFactory()->getEditable('commerce_product_variation.attribute_color')->delete();
  \Drupal::configFactory()->getEditable('commerce_product_variation.attribute_size')->delete();
  \Drupal::configFactory()->getEditable('commerce_product_variation.default.attribute_color')->delete();
  \Drupal::configFactory()->getEditable('commerce_product_variation.default.attribute_size')->delete();
  \Drupal::configFactory()->getEditable('commerce_product_variation.default.default')->delete();
  \Drupal::configFactory()->getEditable('product_pattern')->delete();
  \Drupal::configFactory()->getEditable('products')->delete();
  \Drupal::configFactory()->getEditable('simple_sitemap.settings')->delete();

  \Drupal::service('module_installer')->uninstall(['commerce_cart']);
  \Drupal::service('module_installer')->uninstall(['commerce_number_pattern']);
  \Drupal::service('module_installer')->uninstall(['commerce_order']);
}

/**
 * Prepare the commerce profile type.
 */
function hexentials_prepare_commerce_profile_type() {
  module_load_include('inc', 'hexentials', 'hexentials.products');

  hexentials_prepare_products();
}

/**
 * Callback function to enable the default theme.
 *
 * @see hexentials_install_tasks()
 */
function hexentials_define_theme() {
  \Drupal::configFactory()->getEditable('system.theme')->set('default', 'hex')->save();
}

/** Callback function to prepare the theme structure.
 *
 * @see hexentials_install_tasks()
 */
function hexentials_prepare_theme_structure() {
  \Drupal::configFactory()->getEditable('flexi_cart_search')->delete();
  \Drupal::service('module_installer')->uninstall(['search']);
}

/** Callback function to prepare the theme structure.
 *
 * @see hexentials_install_tasks()
 */
function hexentials_prepare_menu_structure() {
  \Drupal::service('router.builder')->rebuildIfNeeded();
}

/**
 * Callback function to install default profile content.
 *
 * @see hexentials_install_tasks()
 */
function hexentials_import_default_content() {
  if (\Drupal::state()->get('profile_type') == 'brochure') {
    \Drupal::service('default_content.importer')->importContent('hexentials_brochure_default_content');
    \Drupal::service('module_installer')->uninstall(['hexentials_commerce_default_content']);

    return;
  }

  \Drupal::service('default_content.importer')->importContent('hexentials_commerce_default_content');
  \Drupal::service('module_installer')->uninstall(['hexentials_brochure_default_content']);
}

/**
 * Update the theme settings with flexi_cart colors.
 */
function hexentials_update_theme_settings() {
  global $base_url;
  $theme = \Drupal::theme()->getActiveTheme();
  $css_path = $base_url.'/'. $theme->getPath() .'/css/hc.color.css';
  $info = color_get_info('hex');

  $values = [
    'theme' => 'hex',
    'info' => $info,
    'palette' => [
      'primary' => '#111111',
      'active' => '#f51167',
      'shadow' => '#dadce0',
      'hover' => '#f51167',
      'hover_background' => '#ffffff',
      'background' => '#ffffff',
      'view' => '#ffffff',
      'top_menu_item' => '#111111',
      'top_menu_item_small_devices' => '#ffffff',
      'header_second' => '#ffffff',
      'footer_menu_item' => '#ffffff',
      'text' => '#000000',
    ],
    'scheme' => 'flexi_cart',
    'schemes' => NULL,
  ];

  $form_state = new FormState();
  $form_state->setValues($values);

  color_scheme_form_submit(array(), $form_state);
}

/**
 * Prepare the banner block type.
 */
function hexentials_prepare_block_content() {
  $profile_path = \Drupal::service('file_system')->realpath(drupal_get_path('profile', 'hexentials'));
  $info = [
    '839373e3-89b2-4534-ad34-587a5fbf28c5' => [
      0 => [
        'filename' => 'bottom-banner-reduced.jpg',
        'field_name' => 'field_block_banner_image',
      ],
    ],
    '7f724463-3ad6-4c14-8b1c-cea7a289da33' => [
      0 => [
        'filename' => 'change.jpeg',
        'field_name' => 'field_block_double_image_first',
      ],
      1 => [
        'filename' => 'road.jpg',
        'field_name' => 'field_block_double_image_second',
      ],
    ],
  ];

  foreach ($info as $block_uuid => $file_info) {
    foreach ($file_info as $data) {
      $image_path = $profile_path . '/images/blocks/' . $data['filename'];

      $content = file_get_contents($image_path);
      $file = file_save_data($content, 'public://' . $data['filename'], FILE_EXISTS_REPLACE);

      $block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $block_uuid);

      if (!$block->hasField($data['field_name'])) {
        continue;
      }

      $block->set($data['field_name'], $file->id());
      $block->save();
    }
  }
}

/**
 * Configure optimization-related options.
 */
function hexentials_optimization() {
  // Force the minifier to use the C compile version of JSMin as the config
  // isn't working properly.
  \Drupal::configFactory()->getEditable('advagg_js_minify.settings')->set('minifier', 3)->save();
}
